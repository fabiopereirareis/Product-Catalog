dependencias do projeto:
Spring Boot Actuator
Spring Web

criar um projeto vazio
importar um modulo existente
- importar as pastas criadas no spring inicializer

==== tentando fazer abrindo as pastas direto sem importar
colocar o banco de dados para funcionar
usei H2
- adicionar configuração básica do h2 no arquivo application.properties da pasta resourses

verificar saúde da aplicação com actuator
http://localhost:8080/actuator/health

git iniciado no projeto

=================== classe product =====================
criação package model
criação classe Product
- id
- name
- amount

annotações:
@NoArgsConstructor - construtor vazio
@AllArgsConstructor - todos construtores
@Data - get's, set's e outros
@Entity(name = "tb_name") - nome da tabela a ser criada
suaClasse
	@Id - campo onde vai ser o id da tabela (obrigatório)
    	@GeneratedValue - deração do id auto
	seuParamentro

=================== repository product =====================
criar interface na package repository
colocar a anotação:
@Repository - dizer ao spring que é uma classe repository
extender a classe JPArepository


==================== controller product ====================
colocar as anotações:
@RestController - dizer ao spring que é uma classe controller
@RequestMapping(value = "/sua rota")
sua classe{}

instanciar um objeto da classe repository com anotação autowired
	@Autowired
    	ClasseRepository classeRepository;

criar método para salvar
@RequestMapping(method = RequestMethod.POST) - método POST para salvar
    Obejeto salvar(método)(@RequestBody(pegando corpo) Obejeto objeto){
        return classeRepository.salve(objeto);
    }
criar método para pesquisar por id
@RequestMapping(value = "/{variavel}", method = RequestMethod.GET)
    Objeto findById(@PathVariable TipoDaVariavel variavel){
        return productRepository.findById(variavel);
    }
------------------------ atenção vai dar erro ----------------
pois se caso a variavel não existir ou retornar nulo, tem que converter o objeto
para optional; resultado:
@RequestMapping(value = "/{id}", method = RequestMethod.GET)
    Optional<Product> findById(@PathVariable Long id){
        return productRepository.findById(id);
    }

========================= continuação da aula ======================
o professor usou outro banco de dados para diferenciar, nome do banco :"Redis"
tambêm foi importado outro modulo pronto já com o banco funcionando

criação de um novo projeto spring para usar o shoppingCart
adiconado a linha : server.port=8081 para os micro serviços não conflitarem

criação das classes Item, ShopCart no pacote model
anotções @Entity para o banco de dados
adicionado anotação na coluna items da tabela tb_shopcart
criação da classe ShopCartController no pacote controller
- método add
- método findById
- método clear

criação da inteface ShopCartRepository no pacote repository
implementei o swagger para ver os métodos do crud
problema para adiconar item no carrinho ---------------------------
problema estava no tratamento das informações, resolvi deixar igual ao projeto
gestão de pessoas, está funcionando porem falta um tratamento para o carrinho de compras, pois é interessante poder adicionar e remover itens do mesmo carrinho

========================== serviço de configuração =================
criar novo projeto spring
dependencias:
Spring Web
Spring Boot Actuator 
Config Server

importar como módulo para o projeto

colocar a anotação na classe main
@EnableConfigServer
sua classe main

mudar porta pára não conflitar entre os micro serviços
subir para git
-------------------------------------------------------
…or create a new repository on the command line

echo "# Product-Catalog" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/fabiopereirareis/Product-Catalog.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/fabiopereirareis/Product-Catalog.git
git branch -M main
git push -u origin main
-------------------------------------------------------
configurar o server config:
recortar as configurações dos modulos para o arquivo que o sserver config vai ler

definir um nome para cada modulo no arquivo de propriedades de cada modulo
 adicionar o caminho do config server em cada arquivo de modulo do projeto
tem que adicionar a implementação de cliente em cada modulo que for conectar ao  modulo service config

parei aula 7, erro ao importar os arquivos necessários para client cloud

-------------------------------------------------------------
retomada:
criei um novo projeto spring ja incluindo a dependeicia do client cloud
deu erro tambem:
Description:

No spring.config.import property has been defined

Action:

Add a spring.config.import=configserver: property to your configuration.
	If configuration is not required add spring.config.import=optional:configserver: instead.
	To disable this check, set spring.cloud.config.enabled=false or
	spring.cloud.config.import-check.enabled=false.
------------------------------------------------------

rever aula 6
adicionado endereço repo do oswaldo para ver se funciona - voltei para o meu
server rodando ok porta 8082
ainda não piuxou as configurações do servidor
coloquei essa implementação:
implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    bastante usuarios tiveram o memso problema(parece ser coisa de atualização)
agora conectou ao servidor mas não pegou a configuração
adicionei a linha no application.properties :
spring.cloud.config.server.git.default-label=main
no site oficial explica essa questão, tem que especificar a bransh do repositorio
------------------ problema resolvido ------------------------